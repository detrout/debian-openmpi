#! /bin/sh /usr/share/dpatch/dpatch-run
## 30_alpha_inline_assembly.dpatch by Steve Langasek <vorlon@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: fix inline assembly for alpha to be valid with GNU binutils.
## DP: Closes: #384792.

@DPATCH@

--- openmpi-1.1.orig/config/ompi_config_asm.m4
+++ openmpi-1.1/config/ompi_config_asm.m4
@@ -819,7 +819,7 @@
         alpha-*)
             ompi_cv_asm_arch="ALPHA"
             OMPI_ASM_SUPPORT_64BIT=1
-            OMPI_GCC_INLINE_ASSIGN='"bis zero,zero,%0" : "=&r"(ret)'
+            OMPI_GCC_INLINE_ASSIGN='"bis [$]31,[$]31,%0" : "=&r"(ret)'
             ;;
 
         mips-*|mips64-*)
--- openmpi-1.1.orig/opal/include/opal/sys/alpha/atomic.h
+++ openmpi-1.1/opal/include/opal/sys/alpha/atomic.h
@@ -89,19 +89,18 @@
 {
    int32_t ret;
    
-   __asm __volatile__ (
-"1:  ldl_l %0, %1        // load oldval value            \n\
-     cmpeq %0, %2, %0    // compare                   \n\
-     beq %0, 2f          // exit if not equal         \n\
-     mov %3, %0          // value to store            \n\
-     stl_c %0, %1        // attempt to store          \n\
-     beq %0, 3f          // if failed, try again      \n\
-2:                       // done                      \n\
-3:   br 1b               // try again                 \n\
-.previous               \n"
-    : "=&r" (ret), "+m" (*addr)
-    : "r" (oldval), "r" (newval)
-    : "memory");
+   __asm__ __volatile__ (
+	"1:  ldl_l %0, %1\n\t"	// load oldval value
+	"cmpeq %0, %2, %0\n\t"	// compare
+	"beq %0, 2f      \n\t"	// exit if not equal
+	"mov %3, %0      \n\t"	// value to store
+	"stl_c %0, %1    \n\t"	// attempt to store
+	"beq %0, 3f      \n"	// if failed, try again
+	"2:              \n"	// done
+	"3:   br 1b      \n"	// try again
+	: "=&r" (ret), "+m" (*addr)
+	: "r" (oldval), "r" (newval)
+	: "memory");
 
     return ret;
 }
@@ -135,18 +134,17 @@
     int32_t ret;
 
     __asm__ __volatile__ (
-"1:  ldq_l %0, %1        // load oldval value            \n\
-     cmpeq %0, %2, %0    // compare                   \n\
-     beq %0, 2f          // exit if not equal         \n\
-     mov %3, %0          // value to store            \n\
-     stq_c %0, %1        // attempt to store          \n\
-     beq %0, 3f          // if failed, try again      \n\
-2:                       // done                      \n\
-3:   br 1b               // try again                 \n\
-.previous               \n"
-    : "=&r" (ret), "+m" (*addr)
-    : "r" (oldval), "r" (newval)
-    : "memory");
+	"1:  ldq_l %0, %1\n\t"	// load oldval value
+	"cmpeq %0, %2, %0\n\t"	// compare
+	"beq %0, 2f      \n\t"	// exit if not equal
+	"mov %3, %0      \n\t"	// value to store
+	"stq_c %0, %1    \n\t"	// attempt to store
+	"beq %0, 3f      \n"	// if failed, try again
+	"2:              \n"	// done
+	"3:   br 1b      \n"    // try again
+	: "=&r" (ret), "+m" (*addr)
+	: "r" (oldval), "r" (newval)
+	: "memory");
 
     return ret;
 }
