#! /bin/sh /usr/share/dpatch/dpatch-run
## 50fix_kfreebsd_build.dpatch by Manuel Prinz <debian@pinguinkiste.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Patch provided by Petr Salinger <Petr.Salinger@seznam.cz>
## DP: Fixes #433142: openmpi: FTBFS on GNU/kFreeBSD
## DP: Included in Upstream SVN commit #15592, so this patch can possibly
## DP: be deleted when packaging the next upstream version

@DPATCH@
diff -urNad openmpi-1.2.3~/opal/mca/memory/ptmalloc2/opal_ptmalloc2_munmap.c openmpi-1.2.3/opal/mca/memory/ptmalloc2/opal_ptmalloc2_munmap.c
--- openmpi-1.2.3~/opal/mca/memory/ptmalloc2/opal_ptmalloc2_munmap.c	2006-08-15 22:13:35.000000000 +0200
+++ openmpi-1.2.3/opal/mca/memory/ptmalloc2/opal_ptmalloc2_munmap.c	2007-07-25 12:47:29.000000000 +0200
@@ -26,7 +26,8 @@
 #elif defined(HAVE_SYSCALL)
 #include <syscall.h>
 #include <unistd.h>
-#elif defined(HAVE_DLSYM)
+#endif
+#if defined(HAVE_DLSYM)
 #ifndef __USE_GNU
 #define __USE_GNU
 #endif
@@ -59,7 +60,7 @@
 int
 opal_mem_free_ptmalloc2_munmap(void *start, size_t length, int from_alloc)
 {
-#if !defined(HAVE___MUNMAP) && !defined(HAVE_SYSCALL) && defined(HAVE_DLSYM)
+#if !defined(HAVE___MUNMAP) && !(defined(HAVE_SYSCALL) && defined(__NR_munmap)) && defined(HAVE_DLSYM)
     static int (*realmunmap)(void*, size_t);
 #endif
 
@@ -67,7 +68,7 @@
 
 #if defined(HAVE___MUNMAP)
     return __munmap(start, length);
-#elif defined(HAVE_SYSCALL)
+#elif defined(HAVE_SYSCALL) && defined(__NR_munmap)
     return syscall(__NR_munmap, start, length);
 #elif defined(HAVE_DLSYM)
     if (NULL == realmunmap) {
diff -urNad openmpi-1.2.3~/opal/util/stacktrace.c openmpi-1.2.3/opal/util/stacktrace.c
--- openmpi-1.2.3~/opal/util/stacktrace.c	2007-04-19 18:30:53.000000000 +0200
+++ openmpi-1.2.3/opal/util/stacktrace.c	2007-07-25 12:47:29.000000000 +0200
@@ -145,8 +145,12 @@
             case FPE_FLTDIV: si_code_str = "Floating point divide-by-zero"; break;
             case FPE_FLTOVF: si_code_str = "Floating point overflow"; break;
             case FPE_FLTUND: si_code_str = "Floating point underflow"; break;
+#ifdef FPE_FLTRES
             case FPE_FLTRES: si_code_str = "Floating point inexact result"; break;
+#endif
+#ifdef FPE_FLTINV            
             case FPE_FLTINV: si_code_str = "Invalid floating point operation"; break;
+#endif            
 #ifdef FPE_FLTSUB
             case FPE_FLTSUB: si_code_str = "Subscript out of range"; break;
 #endif
